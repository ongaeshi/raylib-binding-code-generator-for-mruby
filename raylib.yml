# Vector2 type
- name: struct Vector2
  fields:
    - float x;
    - float y;

# Vector3 type
- name: struct Vector3         
  fields:
    - float x;
    - float y;
    - float z;

# Vector4 type
- name: struct Vector4
  fields:
    - float x;
    - float y;
    - float z;
    - float w;

# - name: typdef Vector4 Quaternion; # Quaternion type

# Matrix type (OpenGL style 4x4)
- name: struct Matrix
  fields:
    - float m0;
    - float m4;
    - float m8;
    - float m12;
    - float m1;
    - float m5;
    - float m9;
    - float m13;
    - float m2;
    - float m6;
    - float m10;
    - float m14;
    - float m3;
    - float m7;
    - float m11;
    - float m15;

# Color type, RGBA (32bit)
- name: struct Color
  fields:
    - unsigned char r;
    - unsigned char g;
    - unsigned char b;
    - unsigned char a;

# Rectangle type
- name: struct Rectangle
  fields:
    - float x;
    - float y;
    - float width;
    - float height;

# Image type (multiple pixel formats supported)
# NOTE: Data stored in CPU memory (RAM)
- name: struct Image           
  fields:
    # - void *data;            # Image raw data
    - int width;               # Image base width
    - int height;              # Image base height
    - int mipmaps;             # Mipmap levels, 1 by default
    - int format;              # Data format (PixelFormat type)

# # Texture type (multiple internal formats supported)
# # NOTE: Data stored in GPU memory (VRAM)
# - name: struct Texture2D
#   fields:
#     - unsigned int id;         # OpenGL texture id
#     - int width;               # Texture base width
#     - int height;              # Texture base height
#     - int mipmaps;             # Mipmap levels, 1 by default
#     - int format;              # Data format (PixelFormat type)

# # Texture type, same as Texture2D
# # - name: typedef Texture2D Texture;

# # TextureCubemap type, actually, same as Texture2D
# # - name: typedef Texture2D TextureCubemap;

# # RenderTexture type, for texture rendering
# - name: struct RenderTexture2D
#   fields:
#     - unsigned int id;         # OpenGL Framebuffer Object (FBO) id
#     - Texture2D texture;       # Color buffer attachment texture
#     - Texture2D depth;         # Depth buffer attachment texture
#     - bool depthTexture;       # Track if depth attachment is a texture or renderbuffer

# # RenderTexture type, same as RenderTexture2D
# # - name: typedef RenderTexture2D RenderTexture;

# # N-Patch layout info
# - name: struct NPatchInfo
#   fields:
#     - Rectangle sourceRec;   # Region in the texture
#     - int left;              # left border offset
#     - int top;               # top border offset
#     - int right;             # right border offset
#     - int bottom;            # bottom border offset
#     - int type;              # layout of the n-patch: 3x3, 1x3 or 3x1

# # Font character info
# - name: struct CharInfo
#   fields:
#     - int value;              # Character value (Unicode)
#     - Rectangle rec;          # Character rectangle in sprite font
#     - int offsetX;            # Character offset X when drawing
#     - int offsetY;            # Character offset Y when drawing
#     - int advanceX;           # Character advance position X
#     # - unsigned char *data;    # Character pixel data (grayscale)

# # Font type, includes texture and chars data
# - name: struct Font            
#   fields:
#     - Texture2D texture;      # Font texture
#     - int baseSize;           # Base size (default chars height)
#     - int charsCount;         # Number of characters
#     # - CharInfo *chars;        # Characters info data
    
# # Camera type, defines 3d camera position/orientation
# - name: struct Camera3D
#   fields:
#     - Vector3 position;       # Camera position
#     - Vector3 target;         # Camera target it looks-at
#     - Vector3 up;             # Camera up vector (rotation over its axis)
#     - float fovy;             # Camera field-of-view apperture in Y (degrees) in perspective, used as near plane width in orthographic
#     - int type;               # Camera type, defines projection type: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC

# # - name: typedef Camera3D Camera;    # Camera type fallback, defaults to Camera3D

# # Camera2D type, defines a 2d camera
# - name: struct Camera2D
#   fields:
#     - Vector2 offset;         # Camera offset (displacement from target)
#     - Vector2 target;         # Camera target (rotation and zoom origin)
#     - float rotation;         # Camera rotation in degrees
#     - float zoom;             # Camera zoom (scaling), should be 1.0f by default

# - name: struct Mesh            # Vertex data definning a mesh
# - name: struct Shader          # Shader type (generic shader)
# - name: struct MaterialMap     # Material texture map
# - name: struct Material        # Material type
# - name: struct Model           # Basic 3d Model type
# - name: struct Transform       # Transformation (used for bones)
# - name: struct BoneInfo        # Bone information
# - name: struct ModelAnimation  # Model animation data (bones and frames)

# # Ray type (useful for raycast)
# - name: struct Ray
#   fields:
#     - Vector3 position;        # Ray position (origin)
#     - Vector3 direction;       # Ray direction

# # Raycast hit information
# - name: struct RayHitInfo      
#   fields:
#     - bool hit;                # Did the ray hit something?
#     - float distance;          # Distance to nearest hit
#     - Vector3 position;        # Position of nearest hit
#     - Vector3 normal;          # Surface normal of hit

# # Bounding box type for 3d mesh
# - name: struct BoundingBox     
#   fields:
#     - Vector3 min;             # Minimum vertex box-corner
#     - Vector3 max;             # Maximum vertex box-corner
    
# - name: struct Wave            # Wave type, defines audio wave data
# - name: struct Sound           # Basic Sound source and buffer
# - name: struct Music           # Music type (file streaming from memory)
# - name: struct AudioStream     # Raw audio stream type
    
# - name: struct VrDeviceInfo    # VR device parameters

# ---------------------------------------------------------------------------
# module: core
# ---------------------------------------------------------------------------
# Window-related functions
- name: void InitWindow(int width, int height, const char* title);              # Initialize window and OpenGL context
- name: bool WindowShouldClose(void);                                           # Check if KEY_ESCAPE pressed or Close icon pressed
- name: void CloseWindow(void);                                                 # Close window and unload OpenGL context
- name: bool IsWindowReady(void);                                               # Check if window has been initialized successfully
- name: bool IsWindowMinimized(void);                                           # Check if window has been minimized (or lost focus)
- name: bool IsWindowResized(void);                                             # Check if window has been resized
- name: bool IsWindowHidden(void);                                              # Check if window is currently hidden
- name: void ToggleFullscreen(void);                                            # Toggle fullscreen mode (only PLATFORM_DESKTOP)
- name: void UnhideWindow(void);                                                # Show the window
- name: void HideWindow(void);                                                  # Hide the window
# - name: void SetWindowIcon(Image image);                                        # Set icon for window (only PLATFORM_DESKTOP)
- name: void SetWindowTitle(const char* title);                                 # Set title for window (only PLATFORM_DESKTOP)
- name: void SetWindowPosition(int x, int y);                                   # Set window position on screen (only PLATFORM_DESKTOP)
- name: void SetWindowMonitor(int monitor);                                     # Set monitor for the current window (fullscreen mode)
- name: void SetWindowMinSize(int width, int height);                           # Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
- name: void SetWindowSize(int width, int height);                              # Set window dimensions
# - name: void *GetWindowHandle(void);                                            # Get native window handle
- name: int GetScreenWidth(void);                                               # Get current screen width
- name: int GetScreenHeight(void);                                              # Get current screen height
- name: int GetMonitorCount(void);                                              # Get number of connected monitors
- name: int GetMonitorWidth(int monitor);                                       # Get primary monitor width
- name: int GetMonitorHeight(int monitor);                                      # Get primary monitor height
- name: int GetMonitorPhysicalWidth(int monitor);                               # Get primary monitor physical width in millimetres
- name: int GetMonitorPhysicalHeight(int monitor);                              # Get primary monitor physical height in millimetres
- name: const char* GetMonitorName(int monitor);                                # Get the human-readable, UTF-8 encoded name of the primary monitor
- name: const char* GetClipboardText(void);                                     # Get clipboard text content
- name: void SetClipboardText(const char* text);                                # Set clipboard text content

# Cursor-related functions
- name: void ShowCursor(void);                                                  # Shows cursor
- name: void HideCursor(void);                                                  # Hides cursor
- name: bool IsCursorHidden(void);                                              # Check if cursor is not visible
- name: void EnableCursor(void);                                                # Enables cursor (unlock cursor)
- name: void DisableCursor(void);                                               # Disables cursor (lock cursor)

# Drawing-related functions            
- name: void ClearBackground(Color color);                                      # Set background color (framebuffer clear color)
- name: void BeginDrawing(void);                                                # Setup canvas (framebuffer) to start drawing
- name: void EndDrawing(void);                                                  # End canvas drawing and swap buffers (double buffering)
# - name: void BeginMode2D(Camera2D camera);                                      # Initialize 2D mode with custom camera (2D)
- name: void EndMode2D(void);                                                   # Ends 2D mode with custom camera
# - name: void BeginMode3D(Camera3D camera);                                      # Initializes 3D mode with custom camera (3D)
- name: void EndMode3D(void);                                                   # Ends 3D mode and returns to default 2D orthographic mode
# - name: void BeginTextureMode(RenderTexture2D target);                          # Initializes render texture for drawing
- name: void EndTextureMode(void);                                              # Ends drawing to render texture

# Screen-space-related functions           
# - name: Ray GetMouseRay(Vector2 mousePosition, Camera camera);                  # Returns a ray trace from mouse position
# - name: Vector2 GetWorldToScreen(Vector3 position, Camera camera);              # Returns the screen space position for a 3d world space position
# - name: Matrix GetCameraMatrix(Camera camera);                                  # Returns camera transform matrix (view matrix)

# Timing-related functions         
- name: void SetTargetFPS(int fps);                                             # Set target FPS (maximum)
- name: int GetFPS(void);                                                       # Returns current FPS
- name: float GetFrameTime(void);                                               # Returns time in seconds for last frame drawn
# - name: double GetTime(void);                                                   # Returns elapsed time in seconds since InitWindow()

# Color-related functions          
- name: int ColorToInt(Color color);                                            # Returns hexadecimal value for a Color
# - name: Vector4 ColorNormalize(Color color);                                    # Returns color normalized as float [0..1]
# - name: Vector3 ColorToHSV(Color color);                                        # Returns HSV values for a Color
# - name: Color ColorFromHSV(Vector3 hsv);                                        # Returns a Color from HSV values
# - name: Color GetColor(int hexValue);                                           # Returns a Color struct from hexadecimal value
# - name: Color Fade(Color color, float alpha);                                   # Color fade-in or fade-out, alpha goes from 0.0f to 1.0f

# Misc. functions          
# - name: void SetConfigFlags(unsigned char flags);                               # Setup window configuration flags (view FLAGS)
- name: void SetTraceLogLevel(int logType);                                     # Set the current threshold (minimum) log level
- name: void SetTraceLogExit(int logType);                                      # Set the exit threshold (minimum) log level
# - name: void SetTraceLogCallback(TraceLogCallback callback);                    # Set a trace log callback to enable custom logging
# - name: void TraceLog(int logType, const char* text, ...);                      # Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR)
- name: void TakeScreenshot(const char* fileName);                              # Takes a screenshot of current screen (saved a .png)
- name: int GetRandomValue(int min, int max);                                   # Returns a random value between min and max (both included)

# Files management functions           
- name: bool FileExists(const char* fileName);                                  # Check if file exists
- name: bool IsFileExtension(const char* fileName, const char* ext);            # Check file extension
- name: const char* GetExtension(const char* fileName);                         # Get pointer to extension for a filename string
- name: const char* GetFileName(const char* filePath);                          # Get pointer to filename for a path string
- name: const char* GetFileNameWithoutExt(const char* filePath);                # Get filename string without extension (memory should be freed)
- name: const char* GetDirectoryPath(const char* fileName);                     # Get full path for a given fileName (uses static string)
- name: const char* GetWorkingDirectory(void);                                  # Get current working directory (uses static string)
# - name: char **GetDirectoryFiles(const char* dirPath, int *count);              # Get filenames in a directory path (memory should be freed)
- name: void ClearDirectoryFiles(void);                                         # Clear directory files paths buffers (free memory)
- name: bool ChangeDirectory(const char* dir);                                  # Change working directory, returns true if success
- name: bool IsFileDropped(void);                                               # Check if a file has been dropped into window
# - name: char **GetDroppedFiles(int *count);                                     # Get dropped files names (memory should be freed)
- name: void ClearDroppedFiles(void);                                           # Clear dropped files paths buffer (free memory)
# - name: long GetFileModTime(const char* fileName);                              # Get file modification time (last write time)

# Persistent storage management            
- name: void StorageSaveValue(int position, int value);                         # Save integer value to storage file (to defined position)
- name: int StorageLoadValue(int position);                                     # Load integer value from storage file (from defined position)

- name: void OpenURL(const char* url);                                          # Open URL with default system browser (if available)

#------------------------------------------------------------------------------------
# Input Handling Functions
#------------------------------------------------------------------------------------

# Input-related functions: keyb
- name: bool IsKeyPressed(int key);                                             # Detect if a key has been pressed once
- name: bool IsKeyDown(int key);                                                # Detect if a key is being pressed
- name: bool IsKeyReleased(int key);                                            # Detect if a key has been released once
- name: bool IsKeyUp(int key);                                                  # Detect if a key is NOT being pressed
- name: int GetKeyPressed(void);                                                # Get latest key pressed
- name: void SetExitKey(int key);                                               # Set a custom key to exit program (default is ESC)
                
# Input-related functions: gamepads                
- name: bool IsGamepadAvailable(int gamepad);                                   # Detect if a gamepad is available
- name: bool IsGamepadName(int gamepad, const char* name);                      # Check gamepad name (if available)
- name: const char* GetGamepadName(int gamepad);                                # Return gamepad internal name id
- name: bool IsGamepadButtonPressed(int gamepad, int button);                   # Detect if a gamepad button has been pressed once
- name: bool IsGamepadButtonDown(int gamepad, int button);                      # Detect if a gamepad button is being pressed
- name: bool IsGamepadButtonReleased(int gamepad, int button);                  # Detect if a gamepad button has been released once
- name: bool IsGamepadButtonUp(int gamepad, int button);                        # Detect if a gamepad button is NOT being pressed
- name: int GetGamepadButtonPressed(void);                                      # Get the last gamepad button pressed
- name: int GetGamepadAxisCount(int gamepad);                                   # Return gamepad axis count for a gamepad
- name: float GetGamepadAxisMovement(int gamepad, int axis);                    # Return axis movement value for a gamepad axis
                
# Input-related functions: mouse               
- name: bool IsMouseButtonPressed(int button);                                  # Detect if a mouse button has been pressed once
- name: bool IsMouseButtonDown(int button);                                     # Detect if a mouse button is being pressed
- name: bool IsMouseButtonReleased(int button);                                 # Detect if a mouse button has been released once
- name: bool IsMouseButtonUp(int button);                                       # Detect if a mouse button is NOT being pressed
- name: int GetMouseX(void);                                                    # Returns mouse position X
- name: int GetMouseY(void);                                                    # Returns mouse position Y
# - name: Vector2 GetMousePosition(void);                                         # Returns mouse position XY
- name: void SetMousePosition(int x, int y);                                    # Set mouse position XY
- name: void SetMouseOffset(int offsetX, int offsetY);                          # Set mouse offset
- name: void SetMouseScale(float scaleX, float scaleY);                         # Set mouse scaling
- name: int GetMouseWheelMove(void);                                            # Returns mouse wheel movement Y

# Input-related functions: touch               
- name: int GetTouchX(void);                                                    # Returns touch position X for touch point 0 (relative to screen size)
- name: int GetTouchY(void);                                                    # Returns touch position Y for touch point 0 (relative to screen size)
# - name: Vector2 GetTouchPosition(int index);                                    # Returns touch position XY for a touch point index (relative to screen size)

#------------------------------------------------------------------------------------
# Gestures and Touch Handling Functions (Module: gestures)
#------------------------------------------------------------------------------------
# - name: void SetGesturesEnabled(unsigned int gestureFlags);                     # Enable a set of gestures using flags
- name: bool IsGestureDetected(int gesture);                                    # Check if a gesture have been detected
- name: int GetGestureDetected(void);                                           # Get latest detected gesture
- name: int GetTouchPointsCount(void);                                          # Get touch points count
- name: float GetGestureHoldDuration(void);                                     # Get gesture hold time in milliseconds
# - name: Vector2 GetGestureDragVector(void);                                     # Get gesture drag vector
- name: float GetGestureDragAngle(void);                                        # Get gesture drag angle
# - name: Vector2 GetGesturePinchVector(void);                                    # Get gesture pinch delta
- name: float GetGesturePinchAngle(void);                                       # Get gesture pinch angle

#------------------------------------------------------------------------------------
# Camera System Functions (Module: camera)
#------------------------------------------------------------------------------------
# - name: void SetCameraMode(Camera camera, int mode);                            # Set camera mode (multiple camera modes available)
# - name: void UpdateCamera(Camera *camera);                                      # Update camera position for selected mode
            
- name: void SetCameraPanControl(int panKey);                                   # Set camera pan key to combine with mouse movement (free camera)
- name: void SetCameraAltControl(int altKey);                                   # Set camera alt key to combine with mouse movement (free camera)
- name: void SetCameraSmoothZoomControl(int szKey);                             # Set camera smooth zoom key to combine with mouse (free camera)
- name: void SetCameraMoveControls(int frontKey, int backKey, int rightKey, int leftKey, int upKey, int downKey); # Set camera move controls (1st person and 3rd person cameras)

# ---------------------------------------------------------------------------
# module: text
# ---------------------------------------------------------------------------
- name: void DrawText(const char* text, int posX, int posY, int fontSize, Color color);                   # Draw text (using default font)