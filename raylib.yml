# Vector2 type
- name: struct Vector2
  fields:
    - float x;
    - float y;

# Vector3 type
- name: struct Vector3         
  fields:
    - float x;
    - float y;
    - float z;

# Vector4 type
- name: struct Vector4
  fields:
    - float x;
    - float y;
    - float z;
    - float w;

# - name: typdef Vector4 Quaternion; # Quaternion type

# Matrix type (OpenGL style 4x4)
- name: struct Matrix
  fields:
    - float m0;
    - float m4;
    - float m8;
    - float m12;
    - float m1;
    - float m5;
    - float m9;
    - float m13;
    - float m2;
    - float m6;
    - float m10;
    - float m14;
    - float m3;
    - float m7;
    - float m11;
    - float m15;

# Color type, RGBA (32bit)
- name: struct Color
  fields:
    - unsigned char r;
    - unsigned char g;
    - unsigned char b;
    - unsigned char a;

# Rectangle type
- name: struct Rectangle
  fields:
    - float x;
    - float y;
    - float width;
    - float height;

# Image type (multiple pixel formats supported)
# NOTE: Data stored in CPU memory (RAM)
- name: struct Image           
  fields:
    # - void *data;            # Image raw data
    - int width;               # Image base width
    - int height;              # Image base height
    - int mipmaps;             # Mipmap levels, 1 by default
    - int format;              # Data format (PixelFormat type)

# Texture type (multiple internal formats supported)
# NOTE: Data stored in GPU memory (VRAM)
- name: struct Texture2D
  fields:
    # - unsigned int id;         # OpenGL texture id
    - int width;               # Texture base width
    - int height;              # Texture base height
    - int mipmaps;             # Mipmap levels, 1 by default
    - int format;              # Data format (PixelFormat type)

# # Texture type, same as Texture2D
# # - name: typedef Texture2D Texture;

# # TextureCubemap type, actually, same as Texture2D
# # - name: typedef Texture2D TextureCubemap;

# # RenderTexture type, for texture rendering
- name: struct RenderTexture2D
#   fields:
#     - unsigned int id;         # OpenGL Framebuffer Object (FBO) id
#     - Texture2D texture;       # Color buffer attachment texture
#     - Texture2D depth;         # Depth buffer attachment texture
#     - bool depthTexture;       # Track if depth attachment is a texture or renderbuffer

# # RenderTexture type, same as RenderTexture2D
# # - name: typedef RenderTexture2D RenderTexture;

# N-Patch layout info
- name: struct NPatchInfo
#   fields:
#     - Rectangle sourceRec;   # Region in the texture
#     - int left;              # left border offset
#     - int top;               # top border offset
#     - int right;             # right border offset
#     - int bottom;            # bottom border offset
#     - int type;              # layout of the n-patch: 3x3, 1x3 or 3x1

# Font character info
- name: struct CharInfo
#   fields:
#     - int value;              # Character value (Unicode)
#     - Rectangle rec;          # Character rectangle in sprite font
#     - int offsetX;            # Character offset X when drawing
#     - int offsetY;            # Character offset Y when drawing
#     - int advanceX;           # Character advance position X
#     # - unsigned char *data;    # Character pixel data (grayscale)

# Font type, includes texture and chars data
- name: struct Font            
#   fields:
#     - Texture2D texture;      # Font texture
#     - int baseSize;           # Base size (default chars height)
#     - int charsCount;         # Number of characters
#     # - CharInfo *chars;        # Characters info data
    
# Camera type, defines 3d camera position/orientation
- name: struct Camera3D
#   fields:
#     - Vector3 position;       # Camera position
#     - Vector3 target;         # Camera target it looks-at
#     - Vector3 up;             # Camera up vector (rotation over its axis)
#     - float fovy;             # Camera field-of-view apperture in Y (degrees) in perspective, used as near plane width in orthographic
#     - int type;               # Camera type, defines projection type: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC

# # - name: typedef Camera3D Camera;    # Camera type fallback, defaults to Camera3D

# Camera2D type, defines a 2d camera
- name: struct Camera2D
#   fields:
#     - Vector2 offset;         # Camera offset (displacement from target)
#     - Vector2 target;         # Camera target (rotation and zoom origin)
#     - float rotation;         # Camera rotation in degrees
#     - float zoom;             # Camera zoom (scaling), should be 1.0f by default

- name: struct Mesh            # Vertex data definning a mesh
- name: struct Shader          # Shader type (generic shader)
- name: struct MaterialMap     # Material texture map
- name: struct Material        # Material type
- name: struct Model           # Basic 3d Model type
- name: struct Transform       # Transformation (used for bones)
- name: struct BoneInfo        # Bone information
- name: struct ModelAnimation  # Model animation data (bones and frames)

# Ray type (useful for raycast)
- name: struct Ray
#   fields:
#     - Vector3 position;        # Ray position (origin)
#     - Vector3 direction;       # Ray direction

# Raycast hit information
- name: struct RayHitInfo      
#   fields:
#     - bool hit;                # Did the ray hit something?
#     - float distance;          # Distance to nearest hit
#     - Vector3 position;        # Position of nearest hit
#     - Vector3 normal;          # Surface normal of hit

# Bounding box type for 3d mesh
- name: struct BoundingBox     
#   fields:
#     - Vector3 min;             # Minimum vertex box-corner
#     - Vector3 max;             # Maximum vertex box-corner
    
- name: struct Wave            # Wave type, defines audio wave data
- name: struct Sound           # Basic Sound source and buffer
- name: struct Music           # Music type (file streaming from memory)
- name: struct AudioStream     # Raw audio stream type
    
- name: struct VrDeviceInfo    # VR device parameters

# ---------------------------------------------------------------------------
# module: core
# ---------------------------------------------------------------------------
# Window-related functions
- name: void InitWindow(int width, int height, const char* title);              # Initialize window and OpenGL context
- name: bool WindowShouldClose(void);                                           # Check if KEY_ESCAPE pressed or Close icon pressed
- name: void CloseWindow(void);                                                 # Close window and unload OpenGL context
- name: bool IsWindowReady(void);                                               # Check if window has been initialized successfully
- name: bool IsWindowMinimized(void);                                           # Check if window has been minimized (or lost focus)
- name: bool IsWindowResized(void);                                             # Check if window has been resized
- name: bool IsWindowHidden(void);                                              # Check if window is currently hidden
- name: void ToggleFullscreen(void);                                            # Toggle fullscreen mode (only PLATFORM_DESKTOP)
- name: void UnhideWindow(void);                                                # Show the window
- name: void HideWindow(void);                                                  # Hide the window
- name: void SetWindowIcon(Image image);                                        # Set icon for window (only PLATFORM_DESKTOP)
- name: void SetWindowTitle(const char* title);                                 # Set title for window (only PLATFORM_DESKTOP)
- name: void SetWindowPosition(int x, int y);                                   # Set window position on screen (only PLATFORM_DESKTOP)
- name: void SetWindowMonitor(int monitor);                                     # Set monitor for the current window (fullscreen mode)
- name: void SetWindowMinSize(int width, int height);                           # Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
- name: void SetWindowSize(int width, int height);                              # Set window dimensions
# - name: void *GetWindowHandle(void);                                            # Get native window handle
- name: int GetScreenWidth(void);                                               # Get current screen width
- name: int GetScreenHeight(void);                                              # Get current screen height
- name: int GetMonitorCount(void);                                              # Get number of connected monitors
- name: int GetMonitorWidth(int monitor);                                       # Get primary monitor width
- name: int GetMonitorHeight(int monitor);                                      # Get primary monitor height
- name: int GetMonitorPhysicalWidth(int monitor);                               # Get primary monitor physical width in millimetres
- name: int GetMonitorPhysicalHeight(int monitor);                              # Get primary monitor physical height in millimetres
- name: const char* GetMonitorName(int monitor);                                # Get the human-readable, UTF-8 encoded name of the primary monitor
- name: const char* GetClipboardText(void);                                     # Get clipboard text content
- name: void SetClipboardText(const char* text);                                # Set clipboard text content

# Cursor-related functions
- name: void ShowCursor(void);                                                  # Shows cursor
- name: void HideCursor(void);                                                  # Hides cursor
- name: bool IsCursorHidden(void);                                              # Check if cursor is not visible
- name: void EnableCursor(void);                                                # Enables cursor (unlock cursor)
- name: void DisableCursor(void);                                               # Disables cursor (lock cursor)

# Drawing-related functions            
- name: void ClearBackground(Color color);                                      # Set background color (framebuffer clear color)
- name: void BeginDrawing(void);                                                # Setup canvas (framebuffer) to start drawing
- name: void EndDrawing(void);                                                  # End canvas drawing and swap buffers (double buffering)
- name: void BeginMode2D(Camera2D camera);                                      # Initialize 2D mode with custom camera (2D)
- name: void EndMode2D(void);                                                   # Ends 2D mode with custom camera
- name: void BeginMode3D(Camera3D camera);                                      # Initializes 3D mode with custom camera (3D)
- name: void EndMode3D(void);                                                   # Ends 3D mode and returns to default 2D orthographic mode
# - name: void BeginTextureMode(RenderTexture2D target);                          # Initializes render texture for drawing
- name: void EndTextureMode(void);                                              # Ends drawing to render texture

# Screen-space-related functions           
# - name: Ray GetMouseRay(Vector2 mousePosition, Camera camera);                  # Returns a ray trace from mouse position
# - name: Vector2 GetWorldToScreen(Vector3 position, Camera camera);              # Returns the screen space position for a 3d world space position
# - name: Matrix GetCameraMatrix(Camera camera);                                  # Returns camera transform matrix (view matrix)

# Timing-related functions         
- name: void SetTargetFPS(int fps);                                             # Set target FPS (maximum)
- name: int GetFPS(void);                                                       # Returns current FPS
- name: float GetFrameTime(void);                                               # Returns time in seconds for last frame drawn
# - name: double GetTime(void);                                                   # Returns elapsed time in seconds since InitWindow()

# Color-related functions          
- name: int ColorToInt(Color color);                                            # Returns hexadecimal value for a Color
- name: Vector4 ColorNormalize(Color color);                                    # Returns color normalized as float [0..1]
- name: Vector3 ColorToHSV(Color color);                                        # Returns HSV values for a Color
- name: Color ColorFromHSV(Vector3 hsv);                                        # Returns a Color from HSV values
- name: Color GetColor(int hexValue);                                           # Returns a Color struct from hexadecimal value
- name: Color Fade(Color color, float alpha);                                   # Color fade-in or fade-out, alpha goes from 0.0f to 1.0f

# Misc. functions          
# - name: void SetConfigFlags(unsigned char flags);                               # Setup window configuration flags (view FLAGS)
- name: void SetTraceLogLevel(int logType);                                     # Set the current threshold (minimum) log level
- name: void SetTraceLogExit(int logType);                                      # Set the exit threshold (minimum) log level
# - name: void SetTraceLogCallback(TraceLogCallback callback);                    # Set a trace log callback to enable custom logging
# - name: void TraceLog(int logType, const char* text, ...);                      # Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR)
- name: void TakeScreenshot(const char* fileName);                              # Takes a screenshot of current screen (saved a .png)
- name: int GetRandomValue(int min, int max);                                   # Returns a random value between min and max (both included)

# Files management functions           
- name: bool FileExists(const char* fileName);                                  # Check if file exists
- name: bool IsFileExtension(const char* fileName, const char* ext);            # Check file extension
- name: const char* GetExtension(const char* fileName);                         # Get pointer to extension for a filename string
- name: const char* GetFileName(const char* filePath);                          # Get pointer to filename for a path string
- name: const char* GetFileNameWithoutExt(const char* filePath);                # Get filename string without extension (memory should be freed)
- name: const char* GetDirectoryPath(const char* fileName);                     # Get full path for a given fileName (uses static string)
- name: const char* GetWorkingDirectory(void);                                  # Get current working directory (uses static string)
# - name: char **GetDirectoryFiles(const char* dirPath, int *count);              # Get filenames in a directory path (memory should be freed)
- name: void ClearDirectoryFiles(void);                                         # Clear directory files paths buffers (free memory)
- name: bool ChangeDirectory(const char* dir);                                  # Change working directory, returns true if success
- name: bool IsFileDropped(void);                                               # Check if a file has been dropped into window
# - name: char **GetDroppedFiles(int *count);                                     # Get dropped files names (memory should be freed)
- name: void ClearDroppedFiles(void);                                           # Clear dropped files paths buffer (free memory)
# - name: long GetFileModTime(const char* fileName);                              # Get file modification time (last write time)

# Persistent storage management            
- name: void StorageSaveValue(int position, int value);                         # Save integer value to storage file (to defined position)
- name: int StorageLoadValue(int position);                                     # Load integer value from storage file (from defined position)

- name: void OpenURL(const char* url);                                          # Open URL with default system browser (if available)

#------------------------------------------------------------------------------------
# Input Handling Functions
#------------------------------------------------------------------------------------

# Input-related functions: keyb
- name: bool IsKeyPressed(int key);                                             # Detect if a key has been pressed once
- name: bool IsKeyDown(int key);                                                # Detect if a key is being pressed
- name: bool IsKeyReleased(int key);                                            # Detect if a key has been released once
- name: bool IsKeyUp(int key);                                                  # Detect if a key is NOT being pressed
- name: int GetKeyPressed(void);                                                # Get latest key pressed
- name: void SetExitKey(int key);                                               # Set a custom key to exit program (default is ESC)
                
# Input-related functions: gamepads                
- name: bool IsGamepadAvailable(int gamepad);                                   # Detect if a gamepad is available
- name: bool IsGamepadName(int gamepad, const char* name);                      # Check gamepad name (if available)
- name: const char* GetGamepadName(int gamepad);                                # Return gamepad internal name id
- name: bool IsGamepadButtonPressed(int gamepad, int button);                   # Detect if a gamepad button has been pressed once
- name: bool IsGamepadButtonDown(int gamepad, int button);                      # Detect if a gamepad button is being pressed
- name: bool IsGamepadButtonReleased(int gamepad, int button);                  # Detect if a gamepad button has been released once
- name: bool IsGamepadButtonUp(int gamepad, int button);                        # Detect if a gamepad button is NOT being pressed
- name: int GetGamepadButtonPressed(void);                                      # Get the last gamepad button pressed
- name: int GetGamepadAxisCount(int gamepad);                                   # Return gamepad axis count for a gamepad
- name: float GetGamepadAxisMovement(int gamepad, int axis);                    # Return axis movement value for a gamepad axis
                
# Input-related functions: mouse               
- name: bool IsMouseButtonPressed(int button);                                  # Detect if a mouse button has been pressed once
- name: bool IsMouseButtonDown(int button);                                     # Detect if a mouse button is being pressed
- name: bool IsMouseButtonReleased(int button);                                 # Detect if a mouse button has been released once
- name: bool IsMouseButtonUp(int button);                                       # Detect if a mouse button is NOT being pressed
- name: int GetMouseX(void);                                                    # Returns mouse position X
- name: int GetMouseY(void);                                                    # Returns mouse position Y
- name: Vector2 GetMousePosition(void);                                         # Returns mouse position XY
- name: void SetMousePosition(int x, int y);                                    # Set mouse position XY
- name: void SetMouseOffset(int offsetX, int offsetY);                          # Set mouse offset
- name: void SetMouseScale(float scaleX, float scaleY);                         # Set mouse scaling
- name: int GetMouseWheelMove(void);                                            # Returns mouse wheel movement Y

# Input-related functions: touch               
- name: int GetTouchX(void);                                                    # Returns touch position X for touch point 0 (relative to screen size)
- name: int GetTouchY(void);                                                    # Returns touch position Y for touch point 0 (relative to screen size)
- name: Vector2 GetTouchPosition(int index);                                    # Returns touch position XY for a touch point index (relative to screen size)

#------------------------------------------------------------------------------------
# Gestures and Touch Handling Functions (Module: gestures)
#------------------------------------------------------------------------------------
# - name: void SetGesturesEnabled(unsigned int gestureFlags);                     # Enable a set of gestures using flags
- name: bool IsGestureDetected(int gesture);                                    # Check if a gesture have been detected
- name: int GetGestureDetected(void);                                           # Get latest detected gesture
- name: int GetTouchPointsCount(void);                                          # Get touch points count
- name: float GetGestureHoldDuration(void);                                     # Get gesture hold time in milliseconds
- name: Vector2 GetGestureDragVector(void);                                     # Get gesture drag vector
- name: float GetGestureDragAngle(void);                                        # Get gesture drag angle
- name: Vector2 GetGesturePinchVector(void);                                    # Get gesture pinch delta
- name: float GetGesturePinchAngle(void);                                       # Get gesture pinch angle

#------------------------------------------------------------------------------------
# Camera System Functions (Module: camera)
#------------------------------------------------------------------------------------
# - name: void SetCameraMode(Camera camera, int mode);                            # Set camera mode (multiple camera modes available)
# - name: void UpdateCamera(Camera *camera);                                      # Update camera position for selected mode
            
- name: void SetCameraPanControl(int panKey);                                   # Set camera pan key to combine with mouse movement (free camera)
- name: void SetCameraAltControl(int altKey);                                   # Set camera alt key to combine with mouse movement (free camera)
- name: void SetCameraSmoothZoomControl(int szKey);                             # Set camera smooth zoom key to combine with mouse (free camera)
- name: void SetCameraMoveControls(int frontKey, int backKey, int rightKey, int leftKey, int upKey, int downKey); # Set camera move controls (1st person and 3rd person cameras)

# ---------------------------------------------------------------------------
# module: shapes
# ---------------------------------------------------------------------------
# Basic shapes drawing functions
- name: void DrawPixel(int posX, int posY, Color color);                                                    # Draw a pixel
- name: void DrawPixelV(Vector2 position, Color color);                                                     # Draw a pixel (Vector version)
- name: void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);                 # Draw a line
- name: void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);                                      # Draw a line (Vector version)
- name: void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);                        # Draw a line defining thickness
- name: void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);                    # Draw a line using cubic-bezier curves in-out
# - name: void DrawLineStrip(Vector2 *points, int numPoints, Color color);                                    # Draw lines sequence
- name: void DrawCircle(int centerX, int centerY, float radius, Color color);                               # Draw a color-filled circle
- name: void DrawCircleSector(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color);      # Draw a piece of a circle
- name: void DrawCircleSectorLines(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color); # Draw circle sector outline
- name: void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2);        # Draw a gradient-filled circle
- name: void DrawCircleV(Vector2 center, float radius, Color color);                                        # Draw a color-filled circle (Vector version)
- name: void DrawCircleLines(int centerX, int centerY, float radius, Color color);                          # Draw circle outline
- name: void DrawRing(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color);      # Draw ring
- name: void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color); # Draw ring outline
- name: void DrawRectangle(int posX, int posY, int width, int height, Color color);                         # Draw a color-filled rectangle
- name: void DrawRectangleV(Vector2 position, Vector2 size, Color color);                                   # Draw a color-filled rectangle (Vector version)
- name: void DrawRectangleRec(Rectangle rec, Color color);                                                  # Draw a color-filled rectangle
- name: void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);                  # Draw a color-filled rectangle with pro parameters
- name: void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2); # Draw a vertical-gradient-filled rectangle
- name: void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2); # Draw a horizontal-gradient-filled rectangle
- name: void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4);        # Draw a gradient-filled rectangle with custom vertex colors
- name: void DrawRectangleLines(int posX, int posY, int width, int height, Color color);                    # Draw rectangle outline
- name: void DrawRectangleLinesEx(Rectangle rec, int lineThick, Color color);                               # Draw rectangle outline with extended parameters
- name: void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);               # Draw rectangle with rounded edges
- name: void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, int lineThick, Color color); # Draw rectangle with rounded edges outline
- name: void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                                 # Draw a color-filled triangle
- name: void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                            # Draw triangle outline
# - name: void DrawTriangleFan(Vector2 *points, int numPoints, Color color);                                  # Draw a triangle fan defined by points
- name: void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);                # Draw a regular polygon (Vector version)

- name: void SetShapesTexture(Texture2D texture, Rectangle source);                                         # Define default texture used to draw shapes

# Basic shapes collision detection functions
- name: bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);                                            # Check collision between two rectangles
- name: bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);         # Check collision between two circles
- name: bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);                          # Check collision between circle and rectangle
- name: Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);                                          # Get collision rectangle for two rectangles collision
- name: bool CheckCollisionPointRec(Vector2 point, Rectangle rec);                                          # Check if point is inside rectangle
- name: bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);                        # Check if point is inside circle
- name: bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);                # Check if point is inside a triangle

# ---------------------------------------------------------------------------
# module: textures
# ---------------------------------------------------------------------------
# Image/Texture2D data loading/unloading/saving functions
- name: Image LoadImage(const char* fileName);                                                              # Load image from file into CPU memory (RAM)
# - name: Image LoadImageEx(Color *pixels, int width, int height);                                            # Load image from Color array data (RGBA - 32bit)
# - name: Image LoadImagePro(void *data, int width, int height, int format);                                  # Load image from raw data with parameters
- name: Image LoadImageRaw(const char* fileName, int width, int height, int format, int headerSize);        # Load image from RAW file data
- name: void ExportImage(Image image, const char* fileName);                                                # Export image data to file
- name: void ExportImageAsCode(Image image, const char* fileName);                                          # Export image as code file defining an array of bytes
- name: Texture2D LoadTexture(const char* fileName);                                                        # Load texture from file into GPU memory (VRAM)
- name: Texture2D LoadTextureFromImage(Image image);                                                        # Load texture from image data
# - name: TextureCubemap LoadTextureCubemap(Image image, int layoutType);                                     # Load cubemap from image, multiple image cubemap layouts supported
# - name: RenderTexture2D LoadRenderTexture(int width, int height);                                           # Load texture for rendering (framebuffer)
- name: void UnloadImage(Image image);                                                                      # Unload image from CPU memory (RAM)
- name: void UnloadTexture(Texture2D texture);                                                              # Unload texture from GPU memory (VRAM)
# - name: void UnloadRenderTexture(RenderTexture2D target);                                                   # Unload render texture from GPU memory (VRAM)
# - name: Color *GetImageData(Image image);                                                                   # Get pixel data from image as a Color struct array
# - name: Vector4 *GetImageDataNormalized(Image image);                                                       # Get pixel data from image as Vector4 array (float normalized)
- name: int GetPixelDataSize(int width, int height, int format);                                            # Get pixel data size in bytes (image or texture)
- name: Image GetTextureData(Texture2D texture);                                                            # Get pixel data from GPU texture and return an Image
- name: Image GetScreenData(void);                                                                          # Get pixel data from screen buffer and return an Image (screenshot)
# - name: void UpdateTexture(Texture2D texture, const void *pixels);                                          # Update GPU texture with new data

# Image manipulation functions                                                                     
- name: Image ImageCopy(Image image);                                                                       # Create an image duplicate (useful for transformations)
# - name: void ImageToPOT(Image *image, Color fillColor);                                                     # Convert image to POT (power-of-two)
# - name: void ImageFormat(Image *image, int newFormat);                                                      # Convert image data to desired format
# - name: void ImageAlphaMask(Image *image, Image alphaMask);                                                 # Apply alpha mask to image
# - name: void ImageAlphaClear(Image *image, Color color, float threshold);                                   # Clear alpha channel to desired color
# - name: void ImageAlphaCrop(Image *image, float threshold);                                                 # Crop image depending on alpha value
# - name: void ImageAlphaPremultiply(Image *image);                                                           # Premultiply alpha channel
# - name: void ImageCrop(Image *image, Rectangle crop);                                                       # Crop an image to a defined rectangle
# - name: void ImageResize(Image *image, int newWidth, int newHeight);                                        # Resize image (Bicubic scaling algorithm)
# - name: void ImageResizeNN(Image *image, int newWidth,int newHeight);                                       # Resize image (Nearest-Neighbor scaling algorithm)
# - name: void ImageResizeCanvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color color);  # Resize canvas and fill with color
# - name: void ImageMipmaps(Image *image);                                                                    # Generate all mipmap levels for a provided image
# - name: void ImageDither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp);                             # Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
# - name: Color *ImageExtractPalette(Image image, int maxPaletteSize, int *extractCount);                     # Extract color palette from image to maximum size (memory should be freed)
- name: Image ImageText(const char* text, int fontSize, Color color);                                       # Create an image from text (default font)
# - name: Image ImageTextEx(Font font, const char* text, float fontSize, float spacing, Color tint);          # Create an image from text (custom sprite font)
# - name: void ImageDraw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec);                          # Draw a source image within a destination image
# - name: void ImageDrawRectangle(Image *dst, Rectangle rec, Color color);                                    # Draw rectangle within an image
# - name: void ImageDrawRectangleLines(Image *dst, Rectangle rec, int thick, Color color);                    # Draw rectangle lines within an image
# - name: void ImageDrawText(Image *dst, Vector2 position, const char* text, int fontSize, Color color);      # Draw text (default font) within an image (destination)
# - name: void ImageDrawTextEx(Image *dst, Vector2 position, Font font, const char* text, float fontSize, float spacing, Color color); # Draw text (custom sprite font) within an image (destination)
# - name: void ImageFlipVertical(Image *image);                                                               # Flip image vertically
# - name: void ImageFlipHorizontal(Image *image);                                                             # Flip image horizontally
# - name: void ImageRotateCW(Image *image);                                                                   # Rotate image clockwise 90deg
# - name: void ImageRotateCCW(Image *image);                                                                  # Rotate image counter-clockwise 90deg
# - name: void ImageColorTint(Image *image, Color color);                                                     # Modify image color: tint
# - name: void ImageColorInvert(Image *image);                                                                # Modify image color: invert
# - name: void ImageColorGrayscale(Image *image);                                                             # Modify image color: grayscale
# - name: void ImageColorContrast(Image *image, float contrast);                                              # Modify image color: contrast (-100 to 100)
# - name: void ImageColorBrightness(Image *image, int brightness);                                            # Modify image color: brightness (-255 to 255)
# - name: void ImageColorReplace(Image *image, Color color, Color replace);                                   # Modify image color: replace color

# Image generation functions                                                                       
- name: Image GenImageColor(int width, int height, Color color);                                            # Generate image: plain color
- name: Image GenImageGradientV(int width, int height, Color top, Color bottom);                            # Generate image: vertical gradient
- name: Image GenImageGradientH(int width, int height, Color left, Color right);                            # Generate image: horizontal gradient
- name: Image GenImageGradientRadial(int width, int height, float density, Color inner, Color outer);       # Generate image: radial gradient
- name: Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2);     # Generate image: checked
- name: Image GenImageWhiteNoise(int width, int height, float factor);                                      # Generate image: white noise
- name: Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale);            # Generate image: perlin noise
- name: Image GenImageCellular(int width, int height, int tileSize);                                        # Generate image: cellular algorithm. Bigger tileSize means bigger cells

# Texture2D configuration functions                                                                
# - name: void GenTextureMipmaps(Texture2D *texture);                                                         # Generate GPU mipmaps for a texture
# - name: void SetTextureFilter(Texture2D texture, int filterMode);                                           # Set texture scaling filter mode
# - name: void SetTextureWrap(Texture2D texture, int wrapMode);                                               # Set texture wrapping mode

# Texture2D drawing functions                                                                      
- name: void DrawTexture(Texture2D texture, int posX, int posY, Color tint);                                # Draw a Texture2D
- name: void DrawTextureV(Texture2D texture, Vector2 position, Color tint);                                 # Draw a Texture2D with position defined as Vector2
- name: void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);   # Draw a Texture2D with extended parameters
- name: void DrawTextureRec(Texture2D texture, Rectangle sourceRec, Vector2 position, Color tint);          # Draw a part of a texture defined by a rectangle
- name: void DrawTextureQuad(Texture2D texture, Vector2 tiling, Vector2 offset, Rectangle quad, Color tint);  # Draw texture quad with tiling and offset parameters
- name: void DrawTexturePro(Texture2D texture, Rectangle sourceRec, Rectangle destRec, Vector2 origin, float rotation, Color tint);       # Draw a part of a texture defined by a rectangle with 'pro' parameters
# - name: void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle destRec, Vector2 origin, float rotation, Color tint);  # Draws a texture (or part of it) that stretches or shrinks nicely

# ---------------------------------------------------------------------------
# module: text
# ---------------------------------------------------------------------------
# Font loading/unloading functions
- name: Font GetFontDefault(void);                                                                        # Get the default Font
- name: Font LoadFont(const char* fileName);                                                              # Load font from file into GPU memory (VRAM)
# - name: Font LoadFontEx(const char* fileName, int fontSize, int* fontChars, int charsCount);              # Load font from file with extended parameters
- name: Font LoadFontFromImage(Image image, Color key, int firstChar);                                    # Load font from Image (XNA style)
# - name: CharInfo *LoadFontData(const char* fileName, int fontSize, int* fontChars, int charsCount, int type); # Load font data for further use
# - name: Image GenImageFontAtlas(CharInfo *chars, int charsCount, int fontSize, int padding, int packMethod);  # Generate image font atlas using chars info
- name: void UnloadFont(Font font);                                                                       # Unload Font from GPU memory (VRAM)

# Text drawing functions
- name: void DrawFPS(int posX, int posY);                                                                 # Shows current FPS
- name: void DrawText(const char* text, int posX, int posY, int fontSize, Color color);                   # Draw text (using default font)
- name: void DrawTextEx(Font font, const char* text, Vector2 position, float fontSize, float spacing, Color tint);                # Draw text using font and additional parameters
- name: void DrawTextRec(Font font, const char* text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint);   # Draw text using font inside rectangle limits
- name: void DrawTextRecEx(Font font, const char* text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint, int selectStart, int selectLength, Color selectText, Color selectBack);      # Draw text using font inside rectangle limits with support for text selection

# Text misc. functions
- name: int MeasureText(const char* text, int fontSize);                                                  # Measure string width for default font
- name: Vector2 MeasureTextEx(Font font, const char* text, float fontSize, float spacing);                # Measure string size for Font
- name: int GetGlyphIndex(Font font, int character);                                                      # Get index position for a unicode character on font

# Text strings management functions
# NOTE: Some strings allocate memory internally for returned strings, just be careful!
- name: bool TextIsEqual(const char* text1, const char* text2);                                           # Check if two text string are equal
- name: unsigned int TextLength(const char* text);                                                        # Get text length, checks for '\0' ending
# - name: const char* TextFormat(const char* text, ...);                                                    # Text formatting with variables (sprintf style)
- name: const char* TextSubtext(const char* text, int position, int length);                              # Get a piece of a text string
# - name: const char* TextReplace(char* text, const char* replace, const char* by);                         # Replace text string (memory should be freed!)
# - name: const char* TextInsert(const char* text, const char* insert, int position);                       # Insert text in a position (memory should be freed!)
# - name: const char* TextJoin(const char** textList, int count, const char* delimiter);                    # Join text strings with delimiter
# - name: const char* *TextSplit(const char* text, char delimiter, int* count);                             # Split text into multiple strings
# - name: void TextAppend(char *text, const char* append, int* position);                                   # Append text at specific position and move cursor!
- name: int TextFindIndex(const char* text, const char* find);                                            # Find first text occurrence within a string
- name: const char* TextToUpper(const char* text);                                                        # Get upper case version of provided string
- name: const char* TextToLower(const char* text);                                                        # Get lower case version of provided string
- name: const char* TextToPascal(const char* text);                                                       # Get Pascal case notation version of provided string
- name: int TextToInteger(const char* text);                                                              # Get integer value from text (negative values not supported)

# ---------------------------------------------------------------------------
# module: models
# ---------------------------------------------------------------------------
# Basic geometric 3D shapes drawing functions
- name: void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);                                     # Draw a line in 3D world space
- name: void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color); # Draw a circle in 3D world space
- name: void DrawCube(Vector3 position, float width, float height, float length, Color color);              # Draw cube
- name: void DrawCubeV(Vector3 position, Vector3 size, Color color);                                        # Draw cube (Vector version)
- name: void DrawCubeWires(Vector3 position, float width, float height, float length, Color color);         # Draw cube wires
- name: void DrawCubeWiresV(Vector3 position, Vector3 size, Color color);                                   # Draw cube wires (Vector version)
- name: void DrawCubeTexture(Texture2D texture, Vector3 position, float width, float height, float length, Color color); # Draw cube textured
- name: void DrawSphere(Vector3 centerPos, float radius, Color color);                                      # Draw sphere
- name: void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color);             # Draw sphere with extended parameters
- name: void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color);          # Draw sphere wires
- name: void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color); # Draw a cylinder/cone
- name: void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color); # Draw a cylinder/cone wires
- name: void DrawPlane(Vector3 centerPos, Vector2 size, Color color);                                       # Draw a plane XZ
# - name: void DrawRay(Ray ray, Color color);                                                                 # Draw a ray line
- name: void DrawGrid(int slices, float spacing);                                                           # Draw a grid (centered at (0, 0, 0))
- name: void DrawGizmo(Vector3 position);                                                                   # Draw simple gizmo

# Model loading/unloading functions
# - name: Model LoadModel(const char *fileName);                                                              # Load model from files (meshes and materials)
# - name: Model LoadModelFromMesh(Mesh mesh);                                                                 # Load model from generated mesh (default material)
# - name: void UnloadModel(Model model);                                                                      # Unload model from memory (RAM and/or VRAM)

# Mesh loading/unloading functions
# - name: Mesh *LoadMeshes(const char *fileName, int *meshCount);                                             # Load meshes from model file
# - name: void ExportMesh(Mesh mesh, const char *fileName);                                                   # Export mesh data to file
# - name: void UnloadMesh(Mesh *mesh);                                                                        # Unload mesh from memory (RAM and/or VRAM)

# Material loading/unloading functions
# - name: Material *LoadMaterials(const char *fileName, int *materialCount);                                  # Load materials from model file
# - name: Material LoadMaterialDefault(void);                                                                 # Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
# - name: void UnloadMaterial(Material material);                                                             # Unload material from GPU memory (VRAM)
# - name: void SetMaterialTexture(Material *material, int mapType, Texture2D texture);                        # Set texture for a material map type (MAP_DIFFUSE, MAP_SPECULAR...)
# - name: void SetModelMeshMaterial(Model *model, int meshId, int materialId);                                # Set material for a mesh

# Model animations loading/unloading functions
# - name: ModelAnimation *LoadModelAnimations(const char *fileName, int *animsCount);                         # Load model animations from file
# - name: void UpdateModelAnimation(Model model, ModelAnimation anim, int frame);                             # Update model animation pose
# - name: void UnloadModelAnimation(ModelAnimation anim);                                                     # Unload animation data
# - name: bool IsModelAnimationValid(Model model, ModelAnimation anim);                                       # Check model animation skeleton match

# Mesh generation functions
# - name: Mesh GenMeshPoly(int sides, float radius);                                                          # Generate polygonal mesh
# - name: Mesh GenMeshPlane(float width, float length, int resX, int resZ);                                   # Generate plane mesh (with subdivisions)
# - name: Mesh GenMeshCube(float width, float height, float length);                                          # Generate cuboid mesh
# - name: Mesh GenMeshSphere(float radius, int rings, int slices);                                            # Generate sphere mesh (standard sphere)
# - name: Mesh GenMeshHemiSphere(float radius, int rings, int slices);                                        # Generate half-sphere mesh (no bottom cap)
# - name: Mesh GenMeshCylinder(float radius, float height, int slices);                                       # Generate cylinder mesh
# - name: Mesh GenMeshTorus(float radius, float size, int radSeg, int sides);                                 # Generate torus mesh
# - name: Mesh GenMeshKnot(float radius, float size, int radSeg, int sides);                                  # Generate trefoil knot mesh
# - name: Mesh GenMeshHeightmap(Image heightmap, Vector3 size);                                               # Generate heightmap mesh from image data
# - name: Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);                                             # Generate cubes-based map mesh from image data

# Mesh manipulation functions
# - name: BoundingBox MeshBoundingBox(Mesh mesh);                                                             # Compute mesh bounding box limits
# - name: void MeshTangents(Mesh *mesh);                                                                      # Compute mesh tangents
# - name: void MeshBinormals(Mesh *mesh);                                                                     # Compute mesh binormals

# Model drawing functions
# - name: void DrawModel(Model model, Vector3 position, float scale, Color tint);                             # Draw a model (with texture if set)
# - name: void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint); # Draw a model with extended parameters
# - name: void DrawModelWires(Model model, Vector3 position, float scale, Color tint);                        # Draw a model wires (with texture if set)
# - name: void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint); # Draw a model wires (with texture if set) with extended parameters
# - name: void DrawBoundingBox(BoundingBox box, Color color);                                                 # Draw bounding box (wires)
# - name: void DrawBillboard(Camera camera, Texture2D texture, Vector3 center, float size, Color tint);       # Draw a billboard texture
# - name: void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle sourceRec, Vector3 center, float size, Color tint); # Draw a billboard texture defined by sourceRec

# Collision detection functions
# - name: bool CheckCollisionSpheres(Vector3 centerA, float radiusA, Vector3 centerB, float radiusB);         # Detect collision between two spheres
# - name: bool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);                                       # Detect collision between two bounding boxes
# - name: bool CheckCollisionBoxSphere(BoundingBox box, Vector3 centerSphere, float radiusSphere);            # Detect collision between box and sphere
# - name: bool CheckCollisionRaySphere(Ray ray, Vector3 spherePosition, float sphereRadius);                  # Detect collision between ray and sphere
# - name: bool CheckCollisionRaySphereEx(Ray ray, Vector3 spherePosition, float sphereRadius, Vector3 *collisionPoint); # Detect collision between ray and sphere, returns collision point
# - name: bool CheckCollisionRayBox(Ray ray, BoundingBox box);                                                # Detect collision between ray and box
# - name: RayHitInfo GetCollisionRayModel(Ray ray, Model *model);                                             # Get collision info between ray and model
# - name: RayHitInfo GetCollisionRayTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);                    # Get collision info between ray and triangle
# - name: RayHitInfo GetCollisionRayGround(Ray ray, float groundHeight);                                      # Get collision info between ray and ground plane (Y-normal plane)